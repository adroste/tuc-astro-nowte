[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 49,
    "kind": "external",
    "name": "http~ClientRequest",
    "externalLink": "https://nodejs.org/dist/latest/docs/api/http.html#http_class_http_clientrequest",
    "memberof": "src/.external-nodejs.js",
    "static": true,
    "longname": "src/.external-nodejs.js~http~ClientRequest",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "src/api/controller/file.js",
    "content": "/**\n * @author progmem\n * @date 26.11.17\n */\n\n'use strict';\n\n// -------------------------------------------\n// Includes\n// -------------------------------------------\nconst config = require('../../init/config');\nconst Folder = require('../models/folder').Folder;\nconst Document = require('../models/document').Document;\nconst Share = require('../models/share').Share;\nconst utility = require('./utility');\n\n\n// -------------------------------------------\n// File actions\n// -------------------------------------------\n/**\n * Checks if provided title is already existent in specified folder\n * @param title\n * @param isFolder specified is title is folder or document title\n * @param parentId id of folder\n * @returns {Promise.<boolean>} true if no duplicate\n */\nasync function checkTitleIsNoDuplicate(title, isFolder, parentId) {\n    utility.requireVarWithType('parentId', 'string', parentId);\n    utility.requireVarWithType('title', 'string', title);\n    utility.requireVarWithType('isFolder', 'boolean', isFolder);\n    title = title.trim();\n\n    let parentFolder;\n    try {\n        parentFolder = await Folder.findById(parentId, isFolder ? { childIds: 1 } : { documentIds : 1});\n    } catch (err) {\n        utility.throwAndLog(err, 'unknown mongo error');\n    }\n    utility.conditionalThrowWithStatus(parentFolder === null, 'parentId not found', 404);\n\n    let fileEntries;\n    try {\n        fileEntries = isFolder ?\n            await Folder.find({ _id: { $in: parentFolder.childIds }}, { title: 1 })\n            : await Document.find({ _id: { $in: parentFolder.documentIds }}, { title: 1 });\n    } catch (err) {\n        utility.throwAndLog(err, 'unknown mongo error');\n    }\n\n    const matchingEntry = fileEntries.find((elem) => {\n        return elem.title === title;\n    });\n    return matchingEntry === undefined;\n}\nexports.checkTitleIsNoDuplicate = checkTitleIsNoDuplicate;\n\n\n/**\n * Creates a file (folder/document) in specified folder (parentId) with title\n * @param userId userId of user requesting create\n * @param parentId id of parent folder\n * @param isFolder true if folder, false if document\n * @param title\n * @returns {Promise.<string>}\n */\nasync function create(userId, parentId, isFolder, title) {\n    utility.requireVarWithType('userId', 'string', userId);\n    utility.requireVarWithType('parentId', 'string', parentId);\n    utility.requireVarWithType('title', 'string', title);\n    utility.requireVarWithType('isFolder', 'boolean', isFolder);\n    title = title.trim();\n\n    // check user is allowed to create file in parent folder\n    const permissions = await getFilePermissions(userId, parentId, true);\n    utility.conditionalThrowWithStatus(permissions.permissions.manage === false, 'not allowed to manage parentId', 403);\n\n    // check title is no duplicate\n    utility.conditionalThrowWithStatus(\n        !await checkTitleIsNoDuplicate(title, isFolder, parentId),\n        'title already exists', 409);\n\n    // create folder/document (file)\n    let file = {\n        'title': title,\n        'parentId': parentId,\n        'ownerId': permissions.ownerId\n    };\n    file = isFolder ? new Folder(file) : new Document(file);\n    // save file to db\n    try {\n        await file.save();\n    } catch (err) {\n        if (err.message.startsWith('Document validation failed') || err.message.startsWith('Folder validation failed'))\n            utility.conditionalThrowWithStatus(true, err.message, 400);\n        else\n            utility.throwAndLog(err, 'unknown mongo error');\n    }\n\n    // add fileId to parent folder (link back)\n    let rawResponse;\n    try {\n        const pushop = isFolder ? { childIds: file._id } : { documentIds: file._id };\n        rawResponse = await Folder.update({ _id: parentId }, { $push: pushop});\n    } catch (err) {\n        utility.throwAndLog(err, 'unknown mongo error');\n    }\n    utility.conditionalThrowWithStatus(rawResponse.n === 0, 'parentId not found', 404);\n\n    // TODO FIX concurrency check, repair if backlink via id fails\n\n    return file._id.toString();\n}\nexports.create = create;\n\n\n/**\n * Retrieves user-permissions and ownerId for a specified file\n * @param userId\n * @param fileId\n * @param isFolder\n * @returns {Promise.<{ownerId: string, permissions: {read: boolean, annotate: boolean, edit: boolean, manage: boolean}}>}\n */\nasync function getFilePermissions(userId, fileId, isFolder) {\n    const projection = { ownerId: 1, shareIds: 1 };\n    let fileEntry;\n    try {\n        fileEntry = isFolder ?\n            await Folder.findById(fileId, projection)\n            : await Document.findById(fileId, projection);\n    } catch (err) {\n        utility.throwAndLog(err, 'unknown mongo error');\n    }\n\n    if (fileEntry.ownerId.toString() === userId)\n        return { ownerId: userId, permissions: utility.createPermissionsObject(true, true, true, true) };\n\n    const shares = await Share.find({ _id: { $in: fileEntry.shareIds }}, { userId: 1, permissions: 1});\n    const shareEntryForUser = shares.find((elem) => {\n        return elem.userId === userId;\n    });\n    const permissions = shareEntryForUser === undefined ?\n        utility.createPermissionsObject(false, false, false, false)\n        : utility.fixPermissionsObject(shareEntryForUser.permissions);\n    return { ownerId: fileEntry.ownerId.toString(), permissions: permissions };\n}\nexports.getFilePermissions = getFilePermissions;\n\n\n/**\n * Creates listing for a specified folder\n * TODO unit test\n * @param userId\n * @param folderId\n * @returns {Promise.<{title: string, isShared: boolean, documents: Array.<{id: string, title: string, isShared: boolean}>, folders: Array.<{id: string, title: string, isShared: boolean}>}>}\n */\nasync function getFolderListing(userId, folderId) {\n    utility.requireVarWithType('userId', 'string', userId);\n    utility.requireVarWithType('parentId', 'string', folderId);\n\n    // check if user is allowed to read folder\n    const permissions = await getFilePermissions(userId, folderId, true);\n    utility.conditionalThrowWithStatus(permissions.permissions.read === false, 'not allowed to read folderId', 403);\n\n    const entry = await Folder.findById(folderId).\n        populate({ path: 'childIds', select: 'title shareIds'}).\n        populate({ path: 'documentIds', select: 'title shareIds'});\n\n    const mapFunc = (obj) => {\n        return {\n            id: obj._id.toString(),\n            title: obj.title,\n            isShared: obj.shareIds.length > 0\n        };\n    };\n    const sortFunc = (a, b) => {\n        if(a.title < b.title) return -1;\n        if(a.title > b.title) return 1;\n        return 0;\n\n    };\n\n    return {\n        title: entry.title,\n        isShared: entry.shareIds.length > 0,\n        documents: entry.documentIds.map(mapFunc).sort(sortFunc),\n        folders: entry.childIds.map(mapFunc).sort(sortFunc),\n    };\n}\nexports.getFolderListing = getFolderListing;",
    "static": true,
    "longname": "/Users/alexander/Documents/astro-nowte/server/src/api/controller/file.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "config",
    "memberof": "src/api/controller/file.js",
    "static": true,
    "longname": "src/api/controller/file.js~config",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/controller/file.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "Folder",
    "memberof": "src/api/controller/file.js",
    "static": true,
    "longname": "src/api/controller/file.js~Folder",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/controller/file.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "Document",
    "memberof": "src/api/controller/file.js",
    "static": true,
    "longname": "src/api/controller/file.js~Document",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/controller/file.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "name": "Share",
    "memberof": "src/api/controller/file.js",
    "static": true,
    "longname": "src/api/controller/file.js~Share",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/controller/file.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "utility",
    "memberof": "src/api/controller/file.js",
    "static": true,
    "longname": "src/api/controller/file.js~utility",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/controller/file.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "checkTitleIsNoDuplicate",
    "memberof": "src/api/controller/file.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/api/controller/file.js~checkTitleIsNoDuplicate",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/controller/file.js",
    "importStyle": "{checkTitleIsNoDuplicate}",
    "description": "Checks if provided title is already existent in specified folder",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<boolean>} true if no duplicate"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "isFolder",
        "description": "specified is title is folder or document title"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "parentId",
        "description": "id of folder"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<boolean>"
      ],
      "spread": false,
      "description": "true if no duplicate"
    }
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "create",
    "memberof": "src/api/controller/file.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/api/controller/file.js~create",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/controller/file.js",
    "importStyle": "{create}",
    "description": "Creates a file (folder/document) in specified folder (parentId) with title",
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<string>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "userId",
        "description": "userId of user requesting create"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "parentId",
        "description": "id of parent folder"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "isFolder",
        "description": "true if folder, false if document"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<string>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 58,
    "kind": "function",
    "name": "getFilePermissions",
    "memberof": "src/api/controller/file.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/api/controller/file.js~getFilePermissions",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/controller/file.js",
    "importStyle": "{getFilePermissions}",
    "description": "Retrieves user-permissions and ownerId for a specified file",
    "lineNumber": 124,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<{ownerId: string, permissions: {read: boolean, annotate: boolean, edit: boolean, manage: boolean}}>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "userId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fileId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "isFolder",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<{ownerId: string, permissions: {read: boolean, annotate: boolean, edit: boolean, manage: boolean}}>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 59,
    "kind": "function",
    "name": "getFolderListing",
    "memberof": "src/api/controller/file.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/api/controller/file.js~getFolderListing",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/controller/file.js",
    "importStyle": "{getFolderListing}",
    "description": "Creates listing for a specified folder\nTODO unit test",
    "lineNumber": 157,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<{title: string, isShared: boolean, documents: Array.<{id: string, title: string, isShared: boolean}>, folders: Array.<{id: string, title: string, isShared: boolean}>}>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "userId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "folderId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<{title: string, isShared: boolean, documents: Array.<{id: string, title: string, isShared: boolean}>, folders: Array.<{id: string, title: string, isShared: boolean}>}>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 60,
    "kind": "file",
    "name": "src/api/controller/user.js",
    "content": "/**\n * @author progmem\n * @date 22.10.17\n */\n\n'use strict';\n\n// -------------------------------------------\n// Includes\n// -------------------------------------------\nconst config = require('../../init/config');\nconst jwt = require('jsonwebtoken');\nconst bcrypt = require('bcrypt');\nconst mailer = require('../../init/mailer-init');\nconst User = require('../models/user').User;\nconst Folder = require('../models/folder').Folder;\nconst mongoose = require('mongoose');\n\n\n// -------------------------------------------\n// Globals\n// -------------------------------------------\nconst FRONTEND_URL = config.get('web-frontend.url');\nconst SALTING_ROUNDS = config.get('user.password-salting-rounds');\n// TODO advanced: private key rotation\nconst PRIVATE_KEY = config.get('user.private-key');\nconst MAIL_ACTIVATE_USER_SUBJECT = config.get('templates.mail.activateUserAccount.subject');\nconst MAIL_ACTIVATE_USER_BODY = config.get('templates.mail.activateUserAccount.body');\n// TODO validate email request url should lead to a react screen witch handles api call instead of naked api call\nconst REQUEST_URL_VALIDATE_EMAIL = FRONTEND_URL + '/email-validation-done/:token';\nconst MAIL_RESET_PASSWORD_SUBJECT = config.get('templates.mail.resetPassword.subject');\nconst MAIL_RESET_PASSWORD_BODY = config.get('templates.mail.resetPassword.body');\nconst REQUEST_URL_RESET_PASSWORD = FRONTEND_URL + '/reset-password/:token';\n\n\n// -------------------------------------------\n// JWT\n// -------------------------------------------\n/**\n * Creates a JWT containing userId that expires in 24h (for email validation).\n * @param userId\n * @param cb func(err, token)\n */\nfunction createEmailValidationToken(userId, cb) {\n    createJwt({\n        userId: userId\n    }, '24h', cb);\n}\nexports.createEmailValidationToken = createEmailValidationToken;\n\n\n/**\n * Creates a JWT containing payload.\n * @param payload\n * @param expiresIn expressed in seconds or a string describing a time span. Eg: 60, \"2 days\", \"10h\", \"7d\" (null = unlimited)\n * @param cb func(err, token)\n */\nfunction createJwt(payload, expiresIn, cb) {\n    const options = { algorithm: 'HS256' };\n    if (expiresIn)\n        Object.assign(options, { expiresIn: expiresIn });\n    jwt.sign(payload, PRIVATE_KEY, options, (err, token) => {\n        if (err) {\n            const err2 = new Error('could not create token: ' + err.message);\n            err2.status = 500; // Internal Server Error\n            return cb(err);\n        }\n        return cb(null, token);\n    });\n}\n\n\n/**\n * Creates a JWT containing userId that expires in 1h (for password reset).\n * @param userId\n * @param cb func(err, token)\n */\nfunction createPasswordResetToken(userId, cb) {\n    createJwt({\n        userId: userId\n    }, '1h', cb);\n}\nexports.createPasswordResetToken = createPasswordResetToken;\n\n\n/**\n * Creates a JWT containing userId and sessionId.\n * Session tokens do not expire, expiry is set in db\n * @param userId\n * @param sessionId\n * @param cb func(err, token)\n */\nfunction createSessionToken(userId, sessionId, cb) {\n    createJwt({\n        userId: userId,\n        sessionId: sessionId\n    }, null, cb);\n}\nexports.createSessionToken = createSessionToken;\n\n\n/**\n * Verifies und returns the payload of a jwt. Content could be bullsh*t if private key got leaked.\n * @param token\n * @param cb func(err, decodedToken)\n */\nfunction extractJwt(token, cb) {\n    if (typeof token !== 'string') {\n        const err = new Error('token invalid type, token is required');\n        err.status = 400; // Bad Request\n        return cb(err);\n    }\n\n    jwt.verify(token, PRIVATE_KEY, { algorithms: ['HS256'] }, (err, decodedToken) => {\n        if (err) {\n            const err2 = new Error('invalid token: ' + err.message);\n            err2.status = 400; // Bad Request\n            return cb(err2);\n        }\n        return cb(null, decodedToken);\n    });\n}\nexports.extractJwt = extractJwt;\n\n\n// -------------------------------------------\n// Password\n// -------------------------------------------\n/**\n * Hashes a provided password\n * @param password\n * @param cb func(err, hash)\n */\nfunction hashPassword(password, cb) {\n    bcrypt.hash(password, SALTING_ROUNDS, (err, hash) => {\n        if (err) {\n            const err = new Error('password invalid type, password is required');\n            err.status = 400; // Bad Request\n            return cb(err);\n        }\n        return cb(null, hash);\n    });\n}\nexports.hashPassword = hashPassword;\n\n\n/**\n * Compares a provided password with a hash\n * @param password\n * @param hash\n * @param cb func(err, passwordsMatch)\n */\nfunction comparePassword(password, hash, cb) {\n    if (typeof password !== 'string') {\n        const err = new Error('password invalid type, password is required');\n        err.status = 400; // Bad Request\n        return cb(err);\n    }\n    if (typeof hash !== 'string') {\n        const err = new Error('hash invalid type, hash is required');\n        err.status = 400; // Bad Request\n        return cb(err);\n    }\n\n    bcrypt.compare(password, hash, (err, passwordsMatch) => {\n        if (err) {\n            console.error(err);\n            const err2 = new Error('password or hash invalid type/data-format');\n            err2.status = 400; // Bad Request\n            return cb(err2);\n        }\n        return cb(null, passwordsMatch);\n    });\n}\nexports.comparePassword = comparePassword;\n\n\n/**\n * Checks if password is between 8 and 100 characters, if not returns Error\n * @param password password string to check\n * @returns Error object\n */\nfunction validatePasswordLength(password) {\n    if (password.length < 8 || password.length > 100) {\n        const err = new Error('password must be between 8 and 100 characters');\n        err.status = 400; // Bad Request\n        return err;\n    }\n    return null;\n}\n\n\n// -------------------------------------------\n// User actions\n// -------------------------------------------\n/**\n * Changes password for userId to newPassword and deletes/revokes all user sessions\n * @param userId\n * @param newPassword\n * @param cb func(err)\n */\nfunction changePassword(userId, newPassword, cb) {\n    if (typeof userId !== 'string') {\n        const err = new Error('userId invalid type, userId is required');\n        err.status = 400; // Bad Request\n        return cb(err);\n    }\n    if (typeof newPassword !== 'string') {\n        const err = new Error('newPassword invalid type, newPassword is required');\n        err.status = 400; // Bad Request\n        return cb(err);\n    }\n    // 1. checking pw length\n    const err = validatePasswordLength(newPassword);\n    if (err)\n        return cb(err);\n\n    hashPassword(newPassword, (err, hash) => {\n        if (err)\n            return cb(err); // err.status is already set to 400 Bad Request\n\n        User.update({_id: userId}, {$set: {password: hash}}, (err, rawResponse) => {\n            if (err) {\n                console.error(err);\n                return cb(new Error('unknown mongo error'));\n            }\n            if (rawResponse.n === 0) {\n                const err2 = new Error('user not found');\n                err2.status = 404; // Not Found\n                return cb(err2);\n            }\n\n            // revoke all user sessions\n            revokeAllSessions(userId, err => {\n                if (err)\n                    return cb(err);\n                return cb(null);\n            });\n        });\n    });\n}\n\n\n/**\n * Changes a users password by providing email + current password to a new password.\n * @param email\n * @param currentPassword\n * @param newPassword\n * @param cb func(err)\n */\nfunction changePasswordViaCurrentPassword(email, currentPassword, newPassword, cb) {\n    if (typeof currentPassword !== 'string') {\n        const err = new Error('currentPassword invalid type, currentPassword is required');\n        err.status = 400; // Bad Request\n        return cb(err);\n    }\n    if (typeof newPassword !== 'string') {\n        const err = new Error('newPassword invalid type, newPassword is required');\n        err.status = 400; // Bad Request\n        return cb(err);\n    }\n    if (typeof email !== 'string') {\n        const err = new Error('email invalid type, email is required');\n        err.status = 400; // Bad Request\n        return cb(err);\n    }\n    // important: fix email format\n    email = email.trim().toLowerCase();\n\n    User.findOne({ email: email }, { _id: 1, password: 1 }, (err, userEntry) => {\n        if (err)\n            return cb(new Error('unknown mongo error'));\n        if (userEntry === null) {\n            const err2 = new Error('user not found');\n            err2.status = 404; // Not Found\n            return cb(err2);\n        }\n\n        comparePassword(currentPassword, userEntry.password, (err, passwordsMatch) => {\n            if (err)\n                return cb(err); // err.status is already set\n            if (!passwordsMatch) {\n                const err2 = new Error('invalid currentPassword');\n                err2.authHeader = 'login realm=\"login\"';\n                err2.status = 401; // Unauthorized\n                return cb(err2);\n            }\n\n            changePassword(userEntry._id.toString(), newPassword, err => {\n                if (err)\n                    return cb(err); // err.status is already set\n                return cb(null);\n            });\n        });\n    });\n}\nexports.changePasswordViaCurrentPassword = changePasswordViaCurrentPassword;\n\n\n/**\n * Changes a users password by providing password rest token to a new password.\n * @param token passwortResetToken\n * @param newPassword\n * @param cb func(err)\n */\nfunction changePasswordViaResetToken(token, newPassword, cb) {\n    if (typeof newPassword !== 'string') {\n        const err = new Error('newPassword invalid type, newPassword is required');\n        err.status = 400; // Bad Request\n        return cb(err);\n    }\n\n    extractJwt(token, (err, decoded) => {\n        if (err)\n            return cb(err); // err.status is already set to 400 Bad Request\n\n        changePassword(decoded['userId'], newPassword, err => {\n            if (err)\n                return cb(err); // err.status is already set\n            return cb(null);\n        });\n    });\n}\nexports.changePasswordViaResetToken = changePasswordViaResetToken;\n\n\n/**\n * Creates email validation token for user with provided email and sends it to users email\n * @param email\n * @param cb func(err)\n */\nfunction createAndSendEmailValidationToken(email, cb) {\n    if (typeof email !== 'string') {\n        const err = new Error('email invalid type, email is required');\n        err.status = 400; // Bad Request\n        return cb(err);\n    }\n    // important: fix email format\n    email = email.trim().toLowerCase();\n\n    User.findOne({ email: email }, { _id: 1, emailValidated: 1 }, (err, userEntry) => {\n        if (err)\n            return cb(new Error('unknown mongo error'));\n        if (userEntry === null) {\n            const err2 = new Error('user not found');\n            err2.status = 404; // Not Found\n            return cb(err2);\n        }\n        if (userEntry.emailValidated === true) {\n            const err2 = new Error('user already validated');\n            err2.status = 409; // Conflict\n            return cb(err2);\n        }\n        createEmailValidationToken(userEntry._id.toString(), (err, token) => {\n            if (err)\n                return cb(new Error('could not create email validation token'));\n\n            // call callback for success (before sending mail)\n            cb(null);\n\n            // send mail in background\n            const validateLink = REQUEST_URL_VALIDATE_EMAIL.replace(/:token/g, token);\n            const body = MAIL_ACTIVATE_USER_BODY.join('').replace(/:validate-link/g, validateLink);\n            const mailOptions = {\n                from: mailer.FROM,\n                to: email,\n                subject: MAIL_ACTIVATE_USER_SUBJECT,\n                html: body\n            };\n\n            mailer.sendMail(mailOptions, (error, info) => {\n                if (error)\n                    return console.error(error);\n                console.log('Validation email sent to: ' + email + ', id: ' + info.messageId);\n            });\n        });\n    });\n}\nexports.createAndSendEmailValidationToken = createAndSendEmailValidationToken;\n\n\n/**\n * Creates password reset token for user with provided email and sends it to users email\n * @param email\n * @param cb func(err)\n */\nfunction createAndSendPasswordResetToken(email, cb) {\n    if (typeof email !== 'string') {\n        const err = new Error('email invalid type, email is required');\n        err.status = 400; // Bad Request\n        return cb(err);\n    }\n    // important: fix email format\n    email = email.trim().toLowerCase();\n\n    User.findOne({ email: email }, { _id: 1 }, (err, userEntry) => {\n        if (err)\n            return cb(new Error('unknown mongo error'));\n        if (userEntry === null) {\n            const err2 = new Error('user not found');\n            err2.status = 404; // Not Found\n            return cb(err2);\n        }\n        createPasswordResetToken(userEntry._id, (err, token) => {\n            if (err)\n                return cb(new Error('could not create password reset token'));\n\n            // call callback for success (before sending mail)\n            cb(null);\n\n            // send mail in background\n            const passwordResetLink = REQUEST_URL_RESET_PASSWORD.replace(/:token/g, token);\n            const body = MAIL_RESET_PASSWORD_BODY.join('').replace(/:password-reset-link/g, passwordResetLink);\n            const mailOptions = {\n                from: mailer.FROM,\n                to: email,\n                subject: MAIL_RESET_PASSWORD_SUBJECT,\n                html: body\n            };\n\n            mailer.sendMail(mailOptions, (error, info) => {\n                if (error)\n                    return console.error(error);\n                console.log('Password reset email sent to: ' + email + ', id: ' + info.messageId);\n            });\n        });\n    });\n}\nexports.createAndSendPasswordResetToken = createAndSendPasswordResetToken;\n\n\n/**\n * Creates new user by\n * 1. checking password length (8 <= pw.len <= 100),\n * 2. hashing pw via bcrypt,\n * 3. creating root folder,\n * 4. creating user instance,\n * 5. saving user instance to db\n * and returning user\n * @param name\n * @param email\n * @param password\n * @param cb func(err, user)\n */\nfunction createUser(name, email, password, cb) {\n    if (typeof email !== 'string') {\n        const err = new Error('email invalid type, email is required');\n        err.status = 400; // Bad Request\n        return cb(err);\n    }\n    if (typeof password !== 'string') {\n        const err = new Error('password invalid type, password is required');\n        err.status = 400; // Bad Request\n        return cb(err);\n    }\n    // 1. checking pw length\n    const err = validatePasswordLength(password);\n    if (err)\n        return cb(err);\n\n    // important: fix email format\n    email = email.trim().toLowerCase();\n\n    // 2. hashing pw\n    hashPassword(password, (err, hash) => {\n        if (err)\n            return cb(err); // err.status is already set to 400 Bad Request\n\n        // userId\n        const userId = mongoose.Types.ObjectId();\n\n        // 3. create root folder\n        let rootFolder = new Folder({\n            'title': '/',\n            'parentId': null,\n            'ownerId': userId\n        });\n\n        rootFolder.save((err, folderEntry) => {\n            if (err) {\n                console.error(err);\n                return cb(new Error('unknown mongo error'));\n            }\n\n            // 4. creating user instance\n            const user = new User({\n                '_id': userId,\n                'name': name,\n                'email': email,\n                'password': hash,\n                'folderId': folderEntry._id\n            });\n\n            // 5. saving user instance\n            user.save((err, userEntry) => {\n                if (err) {\n                    // remove previously created folder\n                    folderEntry.remove(err => {\n                        if (err)\n                            console.error(err);\n                    });\n\n                    if (err.message.startsWith('User validation failed')) {\n                        err.status = 400; // Bad Request\n                        return cb(err);\n                    }\n                    // 11000: duplicate key (for email)\n                    if (err.name === 'MongoError' && err.code === 11000  && err.message.indexOf(user.email) !== -1) {\n                        const err = new Error('email already exists');\n                        err.status = 409; // Conflict\n                        return cb(err);\n                    }\n                    console.error(err);\n                    return cb(new Error('unknown mongo error'));\n                }\n                return cb(null, userEntry);\n            });\n        });\n    });\n}\nexports.createUser = createUser;\n\n\n/**\n * Authenticates user and creates session by\n * 1. finding user by email,\n * 2. comparing password and hash,\n * 3. creating session,\n * 4. creating session token\n * and returning session token\n * @param email\n * @param password\n * @param cb func(err, sessionToken, name, folderId, userId) name corresponds the users name e.g. \"Max Mustermann\", folderId is the users root folder\n */\nfunction login(email, password, cb) {\n    if (typeof email !== 'string') {\n        const err = new Error('email invalid type, email is required');\n        err.status = 400; // Bad Request\n        return cb(err);\n    }\n    if (typeof password !== 'string') {\n        const err = new Error('password invalid type, password is required');\n        err.status = 400; // Bad Request\n        return cb(err);\n    }\n\n    // important: fix email format\n    email = email.trim().toLowerCase();\n\n    // 1. find user by email\n    User.findOne({ email: email }, { _id: 1, name:1, emailValidated: 1, password: 1, sessions: 1, folderId: 1 }, (err, userEntry) => {\n        if (err) {\n            console.error(err);\n            return cb(new Error('unknown mongo error'));\n        }\n        if (userEntry === null) {\n            const err2 = new Error('user not found');\n            err2.authHeader = 'login realm=\"login\"';\n            err2.status = 401; // Unauthorized\n            return cb(err2);\n        }\n        if (userEntry.emailValidated === false) {\n            const err2 = new Error('user account not validated');\n            err2.authHeader = 'emailValidation realm=\"emailValidation\"';\n            err2.status = 401; // Unauthorized\n            return cb(err2);\n        }\n\n        // 2. compare passwords\n        comparePassword(password, userEntry.password, (err, passwordsMatch) => {\n            if (err)\n                return cb(err); // err.status is already set\n            if (!passwordsMatch) {\n                const err2 = new Error('invalid password');\n                err2.authHeader = 'login realm=\"login\"';\n                err2.status = 401; // Unauthorized\n                return cb(err2);\n            }\n\n            // 3. create session\n            // TODO add expires and description fields\n            const newSession = userEntry.sessions.create({});\n            userEntry.sessions.push(newSession);\n            userEntry.save(err => {\n                if (err) {\n                    console.error(err);\n                    return cb(new Error('unknown mongo error'));\n                }\n\n                // 4. create session token\n                createSessionToken(userEntry._id.toString(), newSession._id.toString(), (err, sessionToken) => {\n                    if (err)\n                        return cb(new Error('could not create session token'));\n                    return cb(null, sessionToken, userEntry.name, userEntry.folderId.toString(), userEntry._id.toString());\n                });\n            });\n        });\n    });\n}\nexports.login = login;\n\n\n/**\n * Logout a provided session (via session token)\n * @param token sessionToken\n * @param cb func(err)\n */\nfunction logout(token, cb) {\n    extractJwt(token, (err, decoded) => {\n        if (err)\n            return cb(err); // err.status already set\n\n        User.findById(decoded['userId'], { sessions: 1 }, (err, userEntry) => {\n            if (err) {\n                console.error(err);\n                return cb(new Error('unknown mongo error'));\n            }\n            if (userEntry === null) {\n                const err2 = new Error('user not found');\n                err2.status = 404; // Not Found\n                return cb(err2);\n            }\n            // find & remove session\n            const session = userEntry.sessions.find((elem) => {\n                return elem._id.toString() === decoded.sessionId;\n            });\n            if (session === undefined) {\n                const err2 = new Error('invalid session');\n                err2.authHeader = 'login realm=\"login\"';\n                err2.status = 401; // Unauthorized\n                return cb(err2);\n            }\n            session.remove();\n\n            userEntry.save(err => {\n                if (err) {\n                    console.error(err);\n                    return cb(new Error('unknown mongo error'));\n                }\n                return cb(null);\n            })\n        });\n    });\n}\nexports.logout = logout;\n\n\n/**\n * Iterates over sessions in userEntry and removes expired ones\n * @param userEntry user-db object\n */\nfunction removeExpiredSessionsFromUserEntry(userEntry) {\n    for (let i = userEntry.sessions.length - 1; i >= 0; i--) {\n        if (userEntry.sessions[i].get('expires')) {\n            if (userEntry.sessions[i].expires.getTime() < Date.now())\n                userEntry.sessions[i].remove();\n        }\n    }\n}\n\n\n/**\n * Removes/revokes all sessions from a userEntry\n * @param userId\n * @param cb func(err)\n */\nfunction revokeAllSessions(userId, cb) {\n    User.findById(userId, { sessions: 1 }, (err, userEntry) => {\n        if (err) {\n            console.error(err);\n            return cb(new Error('unknown mongo error'));\n        }\n        if (userEntry === null) {\n            const err2 = new Error('user not found');\n            err2.status = 404; // Not Found\n            return cb(err2);\n        }\n        userEntry.sessions.splice(0, userEntry.sessions.length);\n        userEntry.save(err => {\n            if (err) {\n                console.error(err);\n                return cb(new Error('unknown mongo error'));\n            }\n            return cb(null);\n        });\n    });\n}\nexports.revokeAllSessions = revokeAllSessions;\n\n\n// TODO proper refactor instead of this BS\nfunction validateSessionAsyncWrapper(sessionToken) {\n    return new Promise((resolve, reject) => {\n        validateSession(sessionToken, (err, userId) => {\n            if (err)\n                reject(err);\n            else\n                resolve(userId);\n        });\n    });\n}\nexports.validateSessionAsyncWrapper = validateSessionAsyncWrapper;\n/**\n * Validates a provided session (as sessionToken) by\n * 1. extracting jwt\n * 2. querying user\n * 3. check sessions\n * 4. saving user entry\n * and returning userId\n * @param token sessionToken\n * @param cb func(err, userId)\n */\nfunction validateSession(token, cb) {\n    // 1. extract jwt\n    extractJwt(token, (err, decoded) => {\n        if (err) {\n            if (err.message.startsWith('invalid token')) {\n                err.authHeader = 'login realm=\"login\"';\n                err.status = 401; // Unauthorized\n            }\n            return cb(err);\n            /*\n            There is no need to check whether jwt is expired,\n            because sessionTokens cannot expire atm.\n            Expiry is set server-side (in db)\n             */\n        }\n\n        // 2. querying user\n        User.findById(decoded.userId, { sessions: 1 }, (err, userEntry) => {\n            if (err) {\n                console.error(err);\n                return cb(new Error('unknown mongo error'));\n            }\n            if (userEntry === null) {\n                const err2 = new Error('user not found');\n                err2.status = 404; // Not Found\n                return cb(err2);\n            }\n\n            // 3. check sessions\n            removeExpiredSessionsFromUserEntry(userEntry);\n\n            // 4. saving user entry\n            userEntry.save((err, userEntry) => {\n                if (err) {\n                    console.error(err);\n                    return cb(new Error('unknown mongo error'));\n                }\n                // no session found => expired\n                const session = userEntry.sessions.find((elem) => {\n                    return elem._id.toString() === decoded.sessionId;\n                });\n                if (session === undefined) {\n                    const err2 = new Error('session expired');\n                    err2.authHeader = 'login realm=\"login\"';\n                    err2.status = 401; // Unauthorized\n                    return cb(err2);\n                }\n                return cb(null, decoded.userId);\n            });\n        });\n    });\n}\nexports.validateSession = validateSession;\n\n\n/**\n * Marks user email as validated if given token is valid\n * @param token valid EmailValidationToken\n * @param cb func(err)\n */\nfunction validateUserEmail(token, cb) {\n    extractJwt(token, (err, decoded) => {\n        if (err)\n            return cb(err); // err.status is already set to 400 Bad Request\n\n        User.update({ _id: decoded['userId'] }, { $set: { emailValidated: true } }, (err, rawResponse) => {\n            if (err) {\n                console.error(err);\n                return cb(new Error('unknown mongo error'));\n            }\n            if (rawResponse.n === 0) {\n                const err2 = new Error('user not found');\n                err2.status = 404; // Not Found\n                return cb(err2);\n            }\n            if (rawResponse.nModified === 0) {\n                const err2 = new Error('user already validated');\n                err2.status = 409; // Conflict\n                return cb(err2);\n            }\n            return cb(null);\n        });\n    });\n}\nexports.validateUserEmail = validateUserEmail;\n",
    "static": true,
    "longname": "/Users/alexander/Documents/astro-nowte/server/src/api/controller/user.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "name": "config",
    "memberof": "src/api/controller/user.js",
    "static": true,
    "longname": "src/api/controller/user.js~config",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "variable",
    "name": "jwt",
    "memberof": "src/api/controller/user.js",
    "static": true,
    "longname": "src/api/controller/user.js~jwt",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 63,
    "kind": "variable",
    "name": "bcrypt",
    "memberof": "src/api/controller/user.js",
    "static": true,
    "longname": "src/api/controller/user.js~bcrypt",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "name": "mailer",
    "memberof": "src/api/controller/user.js",
    "static": true,
    "longname": "src/api/controller/user.js~mailer",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "name": "User",
    "memberof": "src/api/controller/user.js",
    "static": true,
    "longname": "src/api/controller/user.js~User",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "name": "Folder",
    "memberof": "src/api/controller/user.js",
    "static": true,
    "longname": "src/api/controller/user.js~Folder",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "variable",
    "name": "mongoose",
    "memberof": "src/api/controller/user.js",
    "static": true,
    "longname": "src/api/controller/user.js~mongoose",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "name": "FRONTEND_URL",
    "memberof": "src/api/controller/user.js",
    "static": true,
    "longname": "src/api/controller/user.js~FRONTEND_URL",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 69,
    "kind": "variable",
    "name": "SALTING_ROUNDS",
    "memberof": "src/api/controller/user.js",
    "static": true,
    "longname": "src/api/controller/user.js~SALTING_ROUNDS",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "name": "PRIVATE_KEY",
    "memberof": "src/api/controller/user.js",
    "static": true,
    "longname": "src/api/controller/user.js~PRIVATE_KEY",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "variable",
    "name": "MAIL_ACTIVATE_USER_SUBJECT",
    "memberof": "src/api/controller/user.js",
    "static": true,
    "longname": "src/api/controller/user.js~MAIL_ACTIVATE_USER_SUBJECT",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 72,
    "kind": "variable",
    "name": "MAIL_ACTIVATE_USER_BODY",
    "memberof": "src/api/controller/user.js",
    "static": true,
    "longname": "src/api/controller/user.js~MAIL_ACTIVATE_USER_BODY",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 73,
    "kind": "variable",
    "name": "REQUEST_URL_VALIDATE_EMAIL",
    "memberof": "src/api/controller/user.js",
    "static": true,
    "longname": "src/api/controller/user.js~REQUEST_URL_VALIDATE_EMAIL",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 74,
    "kind": "variable",
    "name": "MAIL_RESET_PASSWORD_SUBJECT",
    "memberof": "src/api/controller/user.js",
    "static": true,
    "longname": "src/api/controller/user.js~MAIL_RESET_PASSWORD_SUBJECT",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 75,
    "kind": "variable",
    "name": "MAIL_RESET_PASSWORD_BODY",
    "memberof": "src/api/controller/user.js",
    "static": true,
    "longname": "src/api/controller/user.js~MAIL_RESET_PASSWORD_BODY",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 76,
    "kind": "variable",
    "name": "REQUEST_URL_RESET_PASSWORD",
    "memberof": "src/api/controller/user.js",
    "static": true,
    "longname": "src/api/controller/user.js~REQUEST_URL_RESET_PASSWORD",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 77,
    "kind": "function",
    "name": "createJwt",
    "memberof": "src/api/controller/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/controller/user.js~createJwt",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": null,
    "description": "Creates a JWT containing payload.",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "payload",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "expiresIn",
        "description": "expressed in seconds or a string describing a time span. Eg: 60, \"2 days\", \"10h\", \"7d\" (null = unlimited)"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cb",
        "description": "func(err, token)"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 78,
    "kind": "function",
    "name": "validatePasswordLength",
    "memberof": "src/api/controller/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/controller/user.js~validatePasswordLength",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": null,
    "description": "Checks if password is between 8 and 100 characters, if not returns Error",
    "lineNumber": 183,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Error object"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "password",
        "description": "password string to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Error object"
    },
    "ignore": true
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "changePassword",
    "memberof": "src/api/controller/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/controller/user.js~changePassword",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": null,
    "description": "Changes password for userId to newPassword and deletes/revokes all user sessions",
    "lineNumber": 202,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "userId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newPassword",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cb",
        "description": "func(err)"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "removeExpiredSessionsFromUserEntry",
    "memberof": "src/api/controller/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/controller/user.js~removeExpiredSessionsFromUserEntry",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": null,
    "description": "Iterates over sessions in userEntry and removes expired ones",
    "lineNumber": 652,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "userEntry",
        "description": "user-db object"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "createEmailValidationToken",
    "memberof": "src/api/controller/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/controller/user.js~createEmailValidationToken",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": "{createEmailValidationToken}",
    "description": "Creates a JWT containing userId that expires in 24h (for email validation).",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "userId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cb",
        "description": "func(err, token)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "createPasswordResetToken",
    "memberof": "src/api/controller/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/controller/user.js~createPasswordResetToken",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": "{createPasswordResetToken}",
    "description": "Creates a JWT containing userId that expires in 1h (for password reset).",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "userId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cb",
        "description": "func(err, token)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "createSessionToken",
    "memberof": "src/api/controller/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/controller/user.js~createSessionToken",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": "{createSessionToken}",
    "description": "Creates a JWT containing userId and sessionId.\nSession tokens do not expire, expiry is set in db",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "userId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "sessionId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cb",
        "description": "func(err, token)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "function",
    "name": "extractJwt",
    "memberof": "src/api/controller/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/controller/user.js~extractJwt",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": "{extractJwt}",
    "description": "Verifies und returns the payload of a jwt. Content could be bullsh*t if private key got leaked.",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cb",
        "description": "func(err, decodedToken)"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "function",
    "name": "hashPassword",
    "memberof": "src/api/controller/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/controller/user.js~hashPassword",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": "{hashPassword}",
    "description": "Hashes a provided password",
    "lineNumber": 134,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "password",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cb",
        "description": "func(err, hash)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 86,
    "kind": "function",
    "name": "comparePassword",
    "memberof": "src/api/controller/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/controller/user.js~comparePassword",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": "{comparePassword}",
    "description": "Compares a provided password with a hash",
    "lineNumber": 153,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "password",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hash",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cb",
        "description": "func(err, passwordsMatch)"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "function",
    "name": "changePasswordViaCurrentPassword",
    "memberof": "src/api/controller/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/controller/user.js~changePasswordViaCurrentPassword",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": "{changePasswordViaCurrentPassword}",
    "description": "Changes a users password by providing email + current password to a new password.",
    "lineNumber": 251,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "email",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "currentPassword",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newPassword",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cb",
        "description": "func(err)"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "function",
    "name": "changePasswordViaResetToken",
    "memberof": "src/api/controller/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/controller/user.js~changePasswordViaResetToken",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": "{changePasswordViaResetToken}",
    "description": "Changes a users password by providing password rest token to a new password.",
    "lineNumber": 306,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": "passwortResetToken"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newPassword",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cb",
        "description": "func(err)"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "createAndSendEmailValidationToken",
    "memberof": "src/api/controller/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/controller/user.js~createAndSendEmailValidationToken",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": "{createAndSendEmailValidationToken}",
    "description": "Creates email validation token for user with provided email and sends it to users email",
    "lineNumber": 332,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "email",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cb",
        "description": "func(err)"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "function",
    "name": "createAndSendPasswordResetToken",
    "memberof": "src/api/controller/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/controller/user.js~createAndSendPasswordResetToken",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": "{createAndSendPasswordResetToken}",
    "description": "Creates password reset token for user with provided email and sends it to users email",
    "lineNumber": 387,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "email",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cb",
        "description": "func(err)"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "createUser",
    "memberof": "src/api/controller/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/controller/user.js~createUser",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": "{createUser}",
    "description": "Creates new user by\n1. checking password length (8 <= pw.len <= 100),\n2. hashing pw via bcrypt,\n3. creating root folder,\n4. creating user instance,\n5. saving user instance to db\nand returning user",
    "lineNumber": 445,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "email",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "password",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cb",
        "description": "func(err, user)"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "function",
    "name": "login",
    "memberof": "src/api/controller/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/controller/user.js~login",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": "{login}",
    "description": "Authenticates user and creates session by\n1. finding user by email,\n2. comparing password and hash,\n3. creating session,\n4. creating session token\nand returning session token",
    "lineNumber": 535,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "email",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "password",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cb",
        "description": "func(err, sessionToken, name, folderId, userId) name corresponds the users name e.g. \"Max Mustermann\", folderId is the users root folder"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "function",
    "name": "logout",
    "memberof": "src/api/controller/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/controller/user.js~logout",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": "{logout}",
    "description": "Logout a provided session (via session token)",
    "lineNumber": 608,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": "sessionToken"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cb",
        "description": "func(err)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 94,
    "kind": "function",
    "name": "revokeAllSessions",
    "memberof": "src/api/controller/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/controller/user.js~revokeAllSessions",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": "{revokeAllSessions}",
    "description": "Removes/revokes all sessions from a userEntry",
    "lineNumber": 667,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "userId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cb",
        "description": "func(err)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 95,
    "kind": "function",
    "name": "validateSessionAsyncWrapper",
    "memberof": "src/api/controller/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/controller/user.js~validateSessionAsyncWrapper",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": "{validateSessionAsyncWrapper}",
    "description": null,
    "lineNumber": 692,
    "undocument": true,
    "params": [
      {
        "name": "sessionToken",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "function",
    "name": "validateSession",
    "memberof": "src/api/controller/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/controller/user.js~validateSession",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": "{validateSession}",
    "description": "Validates a provided session (as sessionToken) by\n1. extracting jwt\n2. querying user\n3. check sessions\n4. saving user entry\nand returning userId",
    "lineNumber": 713,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": "sessionToken"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cb",
        "description": "func(err, userId)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 97,
    "kind": "function",
    "name": "validateUserEmail",
    "memberof": "src/api/controller/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/controller/user.js~validateUserEmail",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/controller/user.js",
    "importStyle": "{validateUserEmail}",
    "description": "Marks user email as validated if given token is valid",
    "lineNumber": 773,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": "valid EmailValidationToken"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cb",
        "description": "func(err)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 98,
    "kind": "file",
    "name": "src/api/controller/utility.js",
    "content": "/**\n * @author progmem\n * @date 27.11.17\n */\n\n\"use strict\";\n\n/**\n * Creates a permission object\n * @param read boolean\n * @param annotate boolean\n * @param edit boolean\n * @param manage boolean\n * @returns {{read: boolean, annotate: boolean, edit: boolean, manage: boolean}}\n */\nfunction createPermissionsObject(read = true, annotate = false, edit = false, manage = false) {\n    return fixPermissionsObject({\n        read: Boolean(read),\n        annotate: Boolean(annotate),\n        edit: Boolean(edit),\n        manage: Boolean(manage)\n    });\n}\nexports.createPermissionsObject = createPermissionsObject;\n\n\n/**\n * Fixes permissions on a permission object\n * @param obj permissions object\n * @returns {{read: boolean, annotate: boolean, edit: boolean, manage: boolean}}\n */\nfunction fixPermissionsObject(obj) {\n    return {\n        read: Boolean(obj.read),\n        annotate: Boolean(obj.annotate || obj.edit || obj.manage),\n        edit: Boolean(obj.edit || obj.manage),\n        manage: Boolean(obj.manage)\n    }\n}\nexports.fixPermissionsObject = fixPermissionsObject;\n\n\n/**\n * Throws error with message '{name} invalid type, {name} is required', status 400 Bad Request if type does not match\n * @param name name of parameter\n * @param type type name as string\n * @param val actual value\n */\nfunction requireVarWithType(name, type, val) {\n    if (typeof val !== type) {\n        const err = new Error(`${name} invalid type, ${name} is required`);\n        err.status = 400; // Bad Request\n        throw err;\n    }\n}\nexports.requireVarWithType = requireVarWithType;\n\n\n/**\n * Rethrows error (with custom message if set) but logs it to console before\n * @param err Error object\n * @param msg custom message\n */\nfunction throwAndLog(err, msg) {\n    console.error(err);\n    throw new Error(msg !== undefined ? msg : err.message);\n}\nexports.throwAndLog = throwAndLog;\n\n\n/**\n * Throws error if condition is evaluated to true with msg and statuscode\n * @param condition true triggers throw\n * @param msg error message (error.message)\n * @param statuscode status code (error.status)\n */\nfunction conditionalThrowWithStatus(condition, msg, statuscode) {\n    if (!condition)\n        return;\n    const err = new Error(msg);\n    err.status = statuscode;\n    throw err;\n}\nexports.conditionalThrowWithStatus = conditionalThrowWithStatus;",
    "static": true,
    "longname": "/Users/alexander/Documents/astro-nowte/server/src/api/controller/utility.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 99,
    "kind": "function",
    "name": "createPermissionsObject",
    "memberof": "src/api/controller/utility.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/controller/utility.js~createPermissionsObject",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/controller/utility.js",
    "importStyle": "{createPermissionsObject}",
    "description": "Creates a permission object",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{read: boolean, annotate: boolean, edit: boolean, manage: boolean}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "read",
        "description": "boolean"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "annotate",
        "description": "boolean"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "edit",
        "description": "boolean"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "manage",
        "description": "boolean"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{read: boolean, annotate: boolean, edit: boolean, manage: boolean}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 100,
    "kind": "function",
    "name": "fixPermissionsObject",
    "memberof": "src/api/controller/utility.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/controller/utility.js~fixPermissionsObject",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/controller/utility.js",
    "importStyle": "{fixPermissionsObject}",
    "description": "Fixes permissions on a permission object",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{read: boolean, annotate: boolean, edit: boolean, manage: boolean}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "permissions object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{read: boolean, annotate: boolean, edit: boolean, manage: boolean}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 101,
    "kind": "function",
    "name": "requireVarWithType",
    "memberof": "src/api/controller/utility.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/controller/utility.js~requireVarWithType",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/controller/utility.js",
    "importStyle": "{requireVarWithType}",
    "description": "Throws error with message '{name} invalid type, {name} is required', status 400 Bad Request if type does not match",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of parameter"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "type name as string"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "actual value"
      }
    ],
    "return": null
  },
  {
    "__docId__": 102,
    "kind": "function",
    "name": "throwAndLog",
    "memberof": "src/api/controller/utility.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/controller/utility.js~throwAndLog",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/controller/utility.js",
    "importStyle": "{throwAndLog}",
    "description": "Rethrows error (with custom message if set) but logs it to console before",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": "Error object"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "custom message"
      }
    ],
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "function",
    "name": "conditionalThrowWithStatus",
    "memberof": "src/api/controller/utility.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/controller/utility.js~conditionalThrowWithStatus",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/controller/utility.js",
    "importStyle": "{conditionalThrowWithStatus}",
    "description": "Throws error if condition is evaluated to true with msg and statuscode",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "condition",
        "description": "true triggers throw"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "error message (error.message)"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "statuscode",
        "description": "status code (error.status)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 104,
    "kind": "file",
    "name": "src/api/models/document.js",
    "content": "/**\n * @author progmem\n * @date 26.11.17\n */\n\n'use strict';\n\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\nmongoose.Promise = global.Promise;\n\n\nconst docSchema = new Schema({\n    title: {\n        type: String,\n        trim: true,\n        required: [true, 'name is required']\n    },\n    parentId: {\n        type: Schema.Types.ObjectId,\n        ref: 'Folder',\n        required: [true, 'parentId is required']\n    },\n    ownerId: {\n        type: Schema.Types.ObjectId,\n        ref: 'User',\n        required: [true, 'ownerId is required']\n    },\n    shareIds: [{\n        type: Schema.Types.ObjectId,\n        ref: 'Share'\n    }],\n    data: {\n        type: Schema.Types.Mixed\n    }\n});\n\n\nconst Document = mongoose.model('Document', docSchema);\n\nexports.Document = Document;\n",
    "static": true,
    "longname": "/Users/alexander/Documents/astro-nowte/server/src/api/models/document.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 105,
    "kind": "variable",
    "name": "mongoose",
    "memberof": "src/api/models/document.js",
    "static": true,
    "longname": "src/api/models/document.js~mongoose",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/models/document.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 106,
    "kind": "variable",
    "name": "Schema",
    "memberof": "src/api/models/document.js",
    "static": true,
    "longname": "src/api/models/document.js~Schema",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/models/document.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 107,
    "kind": "variable",
    "name": "docSchema",
    "memberof": "src/api/models/document.js",
    "static": true,
    "longname": "src/api/models/document.js~docSchema",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/models/document.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 108,
    "kind": "variable",
    "name": "Document",
    "memberof": "src/api/models/document.js",
    "static": true,
    "longname": "src/api/models/document.js~Document",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/models/document.js",
    "importStyle": "{Document}",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "file",
    "name": "src/api/models/folder.js",
    "content": "/**\n * @author progmem\n * @date 12.11.17\n */\n\n'use strict';\n\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\nmongoose.Promise = global.Promise;\n\n\nconst folderSchema = new Schema({\n    title: {\n        type: String,\n        trim: true,\n        required: [true, 'name is required']\n    },\n    parentId: {\n        type: Schema.Types.ObjectId,\n        ref: 'Folder',\n        // null if root-dir\n    },\n    ownerId: {\n        type: Schema.Types.ObjectId,\n        ref: 'User',\n        required: [true, 'ownerId is required']\n    },\n    childIds: [{\n        type: Schema.Types.ObjectId,\n        ref: 'Folder'\n    }],\n    documentIds: [{\n        type: Schema.Types.ObjectId,\n        ref: 'Document'\n    }],\n    shareIds: [{\n        type: Schema.Types.ObjectId,\n        ref: 'Share'\n    }]\n});\n\n\nconst Folder = mongoose.model('Folder', folderSchema);\n\nexports.Folder = Folder;",
    "static": true,
    "longname": "/Users/alexander/Documents/astro-nowte/server/src/api/models/folder.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 110,
    "kind": "variable",
    "name": "mongoose",
    "memberof": "src/api/models/folder.js",
    "static": true,
    "longname": "src/api/models/folder.js~mongoose",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/models/folder.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 111,
    "kind": "variable",
    "name": "Schema",
    "memberof": "src/api/models/folder.js",
    "static": true,
    "longname": "src/api/models/folder.js~Schema",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/models/folder.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 112,
    "kind": "variable",
    "name": "folderSchema",
    "memberof": "src/api/models/folder.js",
    "static": true,
    "longname": "src/api/models/folder.js~folderSchema",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/models/folder.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "variable",
    "name": "Folder",
    "memberof": "src/api/models/folder.js",
    "static": true,
    "longname": "src/api/models/folder.js~Folder",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/models/folder.js",
    "importStyle": "{Folder}",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "file",
    "name": "src/api/models/share.js",
    "content": "/**\n * @author progmem\n * @date 26.11.17\n */\n\n'use strict';\n\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\nmongoose.Promise = global.Promise;\n\n\nconst shareSchema = new Schema({\n    isFolder: {\n        type: Boolean,\n        required: [true, 'isFolder is required']\n    },\n    fileId: {\n        type: Schema.Types.ObjectId,\n        required: [true, 'fileId is required']\n    },\n    userId: {\n        type: Schema.Types.ObjectId,\n        ref: 'User',\n        required: [true, 'userId is required']\n    },\n    permissions: {\n        type: Schema.Types.Mixed,\n        required: [true, 'permission is required']\n    }\n});\n\n\nconst Share = mongoose.model('Share', shareSchema);\n\nexports.Share = Share;\n",
    "static": true,
    "longname": "/Users/alexander/Documents/astro-nowte/server/src/api/models/share.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "variable",
    "name": "mongoose",
    "memberof": "src/api/models/share.js",
    "static": true,
    "longname": "src/api/models/share.js~mongoose",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/models/share.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 116,
    "kind": "variable",
    "name": "Schema",
    "memberof": "src/api/models/share.js",
    "static": true,
    "longname": "src/api/models/share.js~Schema",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/models/share.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 117,
    "kind": "variable",
    "name": "shareSchema",
    "memberof": "src/api/models/share.js",
    "static": true,
    "longname": "src/api/models/share.js~shareSchema",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/models/share.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 118,
    "kind": "variable",
    "name": "Share",
    "memberof": "src/api/models/share.js",
    "static": true,
    "longname": "src/api/models/share.js~Share",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/models/share.js",
    "importStyle": "{Share}",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "file",
    "name": "src/api/models/user.js",
    "content": "/**\n * @author progmem\n * @date 22.10.17\n */\n\n'use strict';\n\nconst validator = require('validator');\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\nmongoose.Promise = global.Promise;\n\n\nconst sessionSchema = new Schema({\n    created: {\n        type: Date,\n        default: Date.now\n    },\n    expires: {\n        type: Date\n    },\n    description: {\n        type: String\n    }\n});\n\nconst userSchema = new Schema({\n    name: {\n        type: String,\n        trim: true,\n        required: [true, 'name is required']\n    },\n    email: {\n        type: String,\n        trim: true,\n        lowercase: true,\n        unique: true,\n        required: [true, 'email is required'],\n        validate: [(email) => validator.isEmail(email), 'invalid email'],\n    },\n    password: {\n        type: String,\n        required: [true, 'password is required']\n    },\n    folderId: {\n        type: Schema.Types.ObjectId,\n        ref: 'Folder'\n    },\n    created: {\n        type: Date,\n        default: Date.now\n    },\n    emailValidated: {\n        type: Boolean,\n        default: false\n    },\n    sessions: [sessionSchema]\n});\n\n\nconst User = mongoose.model('User', userSchema);\n\nexports.User = User;",
    "static": true,
    "longname": "/Users/alexander/Documents/astro-nowte/server/src/api/models/user.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 120,
    "kind": "variable",
    "name": "validator",
    "memberof": "src/api/models/user.js",
    "static": true,
    "longname": "src/api/models/user.js~validator",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/models/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 121,
    "kind": "variable",
    "name": "mongoose",
    "memberof": "src/api/models/user.js",
    "static": true,
    "longname": "src/api/models/user.js~mongoose",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/models/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 122,
    "kind": "variable",
    "name": "Schema",
    "memberof": "src/api/models/user.js",
    "static": true,
    "longname": "src/api/models/user.js~Schema",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/models/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 123,
    "kind": "variable",
    "name": "sessionSchema",
    "memberof": "src/api/models/user.js",
    "static": true,
    "longname": "src/api/models/user.js~sessionSchema",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/models/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "name": "userSchema",
    "memberof": "src/api/models/user.js",
    "static": true,
    "longname": "src/api/models/user.js~userSchema",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/models/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "name": "User",
    "memberof": "src/api/models/user.js",
    "static": true,
    "longname": "src/api/models/user.js~User",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/models/user.js",
    "importStyle": "{User}",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "file",
    "name": "src/api/routes/file.js",
    "content": "/**\n * @author progmem\n * @date 26.11.17\n */\n\n'use strict';\n\nconst express = require('express');\nconst router = express.Router();\nconst user = require('../controller/user');\nconst file = require('../controller/file');\nconst utility = require('./utility');\n\n\nrouter.post('/create', utility.asyncMiddleware(async (req, res, next) => {\n    // TODO validate session REFACTOR to promise\n    const userId = await user.validateSessionAsyncWrapper(req.body['sessionToken']);\n    const fileId = await file.create(userId, req.body['parentId'], req.body['isFolder'], req.body['title']);\n    res.status(201); // Created\n    res.json({\n        fileId: fileId\n    });\n}));\n\n\nrouter.get('/list-folder/:folderId', utility.asyncMiddleware(async (req, res, next) => {\n    const userId = await user.validateSessionAsyncWrapper(req.query['sessionToken']);\n    const listing = await file.getFolderListing(userId, req.params.folderId);\n    res.status(200);\n    res.json(listing);\n}));\n\n\n\nmodule.exports = router;",
    "static": true,
    "longname": "/Users/alexander/Documents/astro-nowte/server/src/api/routes/file.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 127,
    "kind": "variable",
    "name": "express",
    "memberof": "src/api/routes/file.js",
    "static": true,
    "longname": "src/api/routes/file.js~express",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/routes/file.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 128,
    "kind": "variable",
    "name": "user",
    "memberof": "src/api/routes/file.js",
    "static": true,
    "longname": "src/api/routes/file.js~user",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/routes/file.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 129,
    "kind": "variable",
    "name": "file",
    "memberof": "src/api/routes/file.js",
    "static": true,
    "longname": "src/api/routes/file.js~file",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/routes/file.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 130,
    "kind": "variable",
    "name": "utility",
    "memberof": "src/api/routes/file.js",
    "static": true,
    "longname": "src/api/routes/file.js~utility",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/routes/file.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 131,
    "kind": "variable",
    "name": "router",
    "memberof": "src/api/routes/file.js",
    "static": true,
    "longname": "src/api/routes/file.js~router",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/routes/file.js",
    "importStyle": "router",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "file",
    "name": "src/api/routes/share.js",
    "content": "/**\n * @author progmem\n * @date 26.11.17\n */\n",
    "static": true,
    "longname": "/Users/alexander/Documents/astro-nowte/server/src/api/routes/share.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 133,
    "kind": "file",
    "name": "src/api/routes/user.js",
    "content": "/**\n * @author progmem\n * @date 21.10.17\n */\n\n'use strict';\n\nconst express = require('express');\nconst router = express.Router();\nconst user = require('../controller/user');\n\n\nrouter.put('/change-password', (req, res, next) => {\n    const actionHandler = (err) => {\n        if (err) {\n            if (err.status === 401)\n                res.setHeader('WWW-Authenticate', err.authHeader);\n            return next(err);\n        }\n        res.status(204); // No Content\n        res.json({});\n    };\n\n    const passwordResetToken = req.body['passwordResetToken'];\n    if (typeof passwordResetToken !== 'undefined')\n        user.changePasswordViaResetToken(passwordResetToken, req.body['newPassword'], actionHandler);\n    else\n        user.changePasswordViaCurrentPassword(req.body['email'], req.body['currentPassword'], req.body['newPassword'], actionHandler);\n});\n\n\nrouter.post('/create', (req, res, next) => {\n    user.createUser(req.body['name'], req.body['email'], req.body['password'], (err, userEntry) => {\n        if (err)\n            return next(err);\n        res.status(204); // No Content\n        res.json({});\n\n        // create emailValidationToken and send validate link via email\n        user.createAndSendEmailValidationToken(userEntry.email, err => {\n            // if it fails, it fails silently for the user\n            if (err)\n                console.error('Could not create and send emailValidationToken after user creation for user: ' + userEntry.email + ' with err: ' + err);\n        });\n    });\n});\n\n\nrouter.post('/login', (req, res, next) => {\n    user.login(req.body['email'], req.body['password'], (err, sessionToken, name, folderId, userId) => {\n        if (err) {\n            if (err.status === 401)\n                res.setHeader('WWW-Authenticate', err.authHeader);\n            return next(err);\n        }\n        res.status(201); // Created\n        res.json({\n            sessionToken: sessionToken,\n            name: name,\n            folderId: folderId,\n            userId: userId\n        });\n    });\n});\n\n\nrouter.post('/logout', (req, res, next) => {\n    user.logout(req.body['sessionToken'], err => {\n        if (err) {\n            if (err.status === 401)\n                res.setHeader('WWW-Authenticate', err.authHeader);\n            return next(err);\n        }\n        res.status(204); // No Content\n        res.json({});\n    });\n});\n\n\nrouter.post('/request-password-reset', (req, res, next) => {\n    user.createAndSendPasswordResetToken(req.body['email'], err => {\n        if (err)\n            return next(err);\n        res.status(204); // No Content\n        res.json({});\n    });\n});\n\n\nrouter.post('/resend-validation-email', (req, res, next) => {\n    user.createAndSendEmailValidationToken(req.body['email'], err => {\n        if (err)\n            return next(err);\n        res.status(204); // No Content\n        res.json({});\n    });\n});\n\n\nrouter.post('/validate-email', (req, res, next) => {\n    user.validateUserEmail(req.body['emailValidationToken'], err => {\n        if (err)\n            return next(err);\n        res.status(204); // No Content\n        res.json({});\n    });\n});\n\n\nmodule.exports = router;\n",
    "static": true,
    "longname": "/Users/alexander/Documents/astro-nowte/server/src/api/routes/user.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 134,
    "kind": "variable",
    "name": "express",
    "memberof": "src/api/routes/user.js",
    "static": true,
    "longname": "src/api/routes/user.js~express",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/routes/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 135,
    "kind": "variable",
    "name": "user",
    "memberof": "src/api/routes/user.js",
    "static": true,
    "longname": "src/api/routes/user.js~user",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/api/routes/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 136,
    "kind": "variable",
    "name": "router",
    "memberof": "src/api/routes/user.js",
    "static": true,
    "longname": "src/api/routes/user.js~router",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/routes/user.js",
    "importStyle": "router",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "file",
    "name": "src/api/routes/utility.js",
    "content": "/**\n * @author progmem\n * @date 27.11.17\n */\n\nconst asyncMiddleware = fn =>\n    (req, res, next) => {\n        Promise.resolve(fn(req, res, next))\n            .catch(next);\n    };\nexports.asyncMiddleware = asyncMiddleware;",
    "static": true,
    "longname": "/Users/alexander/Documents/astro-nowte/server/src/api/routes/utility.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 138,
    "kind": "function",
    "name": "asyncMiddleware",
    "memberof": "src/api/routes/utility.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/api/routes/utility.js~asyncMiddleware",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/api/routes/utility.js",
    "importStyle": "{asyncMiddleware}",
    "description": "",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "progmem"
      },
      {
        "tagName": "@date",
        "tagValue": "27.11.17"
      }
    ],
    "params": [
      {
        "name": "fn",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 139,
    "kind": "file",
    "name": "src/init/config.js",
    "content": "/**\n * @author progmem\n * @date 29.10.17\n */\n\n'use strict';\n\nconst ENV = process.env.NODE_ENV;\nlet configJSON;\n\nif (ENV === 'production')\n    configJSON = require('./config/production.json');\nelse\n    configJSON = require('../config/development.json');\n\nexports.get = (prop) => {\n    if (typeof prop !== 'string')\n        throw new Error('prop is not a valid string');\n\n    const split = prop.split('.');\n    let res = configJSON;\n    for (let i = 0; i < split.length; i++) {\n        if (!res.hasOwnProperty(split[i]))\n            throw new Error('config has no property: ' + prop);\n        res = res[split[i]];\n    }\n\n    return res;\n};\n",
    "static": true,
    "longname": "/Users/alexander/Documents/astro-nowte/server/src/init/config.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 140,
    "kind": "variable",
    "name": "ENV",
    "memberof": "src/init/config.js",
    "static": true,
    "longname": "src/init/config.js~ENV",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/init/config.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 141,
    "kind": "function",
    "name": "get",
    "memberof": "src/init/config.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/init/config.js~get",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/init/config.js",
    "importStyle": "{get}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "prop",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "file",
    "name": "src/init/mailer-init.js",
    "content": "/**\n * @author progmem\n * @date 01.11.17\n */\n\n'use strict';\n\nconst config = require('./config');\nconst nodemailer = require('nodemailer');\n\nconst options = config.get('mail.connection');\nconst transporter = nodemailer.createTransport(options);\n\n// verify connection configuration\ntransporter.verify(function(error, success) {\n    if (error) {\n        console.error('Could not connect to mail server: ' + error.toString());\n    } else {\n        console.log('Connected to mail server at: ' + options.host);\n    }\n});\n\nmodule.exports = transporter;\nexports.FROM = config.get('mail.from');",
    "static": true,
    "longname": "/Users/alexander/Documents/astro-nowte/server/src/init/mailer-init.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 143,
    "kind": "variable",
    "name": "config",
    "memberof": "src/init/mailer-init.js",
    "static": true,
    "longname": "src/init/mailer-init.js~config",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/init/mailer-init.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 144,
    "kind": "variable",
    "name": "nodemailer",
    "memberof": "src/init/mailer-init.js",
    "static": true,
    "longname": "src/init/mailer-init.js~nodemailer",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/init/mailer-init.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 145,
    "kind": "variable",
    "name": "options",
    "memberof": "src/init/mailer-init.js",
    "static": true,
    "longname": "src/init/mailer-init.js~options",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/init/mailer-init.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 146,
    "kind": "variable",
    "name": "FROM",
    "memberof": "src/init/mailer-init.js",
    "static": true,
    "longname": "src/init/mailer-init.js~FROM",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/init/mailer-init.js",
    "importStyle": "{FROM}",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "variable",
    "name": "transporter",
    "memberof": "src/init/mailer-init.js",
    "static": true,
    "longname": "src/init/mailer-init.js~transporter",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/init/mailer-init.js",
    "importStyle": "transporter",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "file",
    "name": "src/init/mongo-init.js",
    "content": "/**\n * @author progmem\n * @date 27.10.17\n */\n\n'use strict';\n\nconst config = require('./config');\nconst mongoose = require('mongoose');\n\nconst MONGO_URL = config.get('server.mongo-url');\nmongoose.Promise = Promise;\n\n\n// mongodb connection\nmongoose.connect(MONGO_URL, {\n    useMongoClient: true,\n    promiseLibrary: global.Promise\n});\n\nconst db = mongoose.connection;\n\ndb.on('error', console.error.bind(console, 'connection error:'));\n\ndb.once('open', () => {\n    console.log(`Connected to Mongo at: ${new Date()}`)\n});\n\n\nmodule.exports = db;",
    "static": true,
    "longname": "/Users/alexander/Documents/astro-nowte/server/src/init/mongo-init.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 149,
    "kind": "variable",
    "name": "config",
    "memberof": "src/init/mongo-init.js",
    "static": true,
    "longname": "src/init/mongo-init.js~config",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/init/mongo-init.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 150,
    "kind": "variable",
    "name": "mongoose",
    "memberof": "src/init/mongo-init.js",
    "static": true,
    "longname": "src/init/mongo-init.js~mongoose",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/init/mongo-init.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 151,
    "kind": "variable",
    "name": "MONGO_URL",
    "memberof": "src/init/mongo-init.js",
    "static": true,
    "longname": "src/init/mongo-init.js~MONGO_URL",
    "access": "public",
    "export": false,
    "importPath": "nowte-server/src/init/mongo-init.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 152,
    "kind": "variable",
    "name": "db",
    "memberof": "src/init/mongo-init.js",
    "static": true,
    "longname": "src/init/mongo-init.js~db",
    "access": "public",
    "export": true,
    "importPath": "nowte-server/src/init/mongo-init.js",
    "importStyle": "db",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "file",
    "name": "src/server.js",
    "content": "/**\n * @author progmem\n * @date 19.10.17\n */\n\n'use strict';\n\nconst config = require('./init/config');\nconst express = require('express');\nconst cors = require('cors');\nconst jsonParser = require('body-parser').json;\nconst logger = require('morgan');\nconst userRoutes = require('./api/routes/user');\nconst fileRoutes = require('./api/routes/file');\nconst db = require('./init/mongo-init');\n\nconst PORT =  config.get('server.http-port');\nconst app = express();\n\n\n// TODO only enable cors for specific routes\napp.use(cors());\n// TODO change logger format depending on environment: https://github.com/expressjs/morgan\napp.use(logger('dev'));\napp.use(jsonParser());\n\n\n// routes\napp.use('/api/user', userRoutes);\napp.use('/api/file', fileRoutes);\n\n\n// err handling\n// 404\napp.use((req, res, next) => {\n    const err = new Error(\"not found\");\n    err.status = 404;\n    next(err);\n});\n\napp.use((err, req, res, next) => {\n    res.status(err.status || 500);\n    if (err.status === 401)\n        res.setHeader('WWW-Authenticate', err.authHeader);\n    res.json({\n        error: {\n            message: err.message\n        }\n    });\n});\n\n// start http server\nconst server = app.listen(PORT, function() {\n    console.log('express listening on:', PORT);\n});\n\n\nconst gracefulExit = function() {\n    server.close(() => {\n        console.log('Express server stopped');\n        db.close(function () {\n            console.log('Mongoose default connection is disconnected through app termination');\n            process.exit(0);\n        });\n    });\n};\n\n// If the Node process ends, close the Mongoose connection\nprocess.on('SIGINT', gracefulExit).on('SIGTERM', gracefulExit);\n",
    "static": true,
    "longname": "/Users/alexander/Documents/astro-nowte/server/src/server.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 154,
    "kind": "variable",
    "name": "config",
    "memberof": "src/server.js",
    "static": true,
    "longname": "src/server.js~config",
    "access": "public",
    "export": false,
    "importPath": "nowte-server",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 155,
    "kind": "variable",
    "name": "express",
    "memberof": "src/server.js",
    "static": true,
    "longname": "src/server.js~express",
    "access": "public",
    "export": false,
    "importPath": "nowte-server",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 156,
    "kind": "variable",
    "name": "cors",
    "memberof": "src/server.js",
    "static": true,
    "longname": "src/server.js~cors",
    "access": "public",
    "export": false,
    "importPath": "nowte-server",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 157,
    "kind": "variable",
    "name": "jsonParser",
    "memberof": "src/server.js",
    "static": true,
    "longname": "src/server.js~jsonParser",
    "access": "public",
    "export": false,
    "importPath": "nowte-server",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 158,
    "kind": "variable",
    "name": "logger",
    "memberof": "src/server.js",
    "static": true,
    "longname": "src/server.js~logger",
    "access": "public",
    "export": false,
    "importPath": "nowte-server",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 159,
    "kind": "variable",
    "name": "userRoutes",
    "memberof": "src/server.js",
    "static": true,
    "longname": "src/server.js~userRoutes",
    "access": "public",
    "export": false,
    "importPath": "nowte-server",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 160,
    "kind": "variable",
    "name": "fileRoutes",
    "memberof": "src/server.js",
    "static": true,
    "longname": "src/server.js~fileRoutes",
    "access": "public",
    "export": false,
    "importPath": "nowte-server",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 161,
    "kind": "variable",
    "name": "db",
    "memberof": "src/server.js",
    "static": true,
    "longname": "src/server.js~db",
    "access": "public",
    "export": false,
    "importPath": "nowte-server",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 162,
    "kind": "variable",
    "name": "PORT",
    "memberof": "src/server.js",
    "static": true,
    "longname": "src/server.js~PORT",
    "access": "public",
    "export": false,
    "importPath": "nowte-server",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 163,
    "kind": "variable",
    "name": "app",
    "memberof": "src/server.js",
    "static": true,
    "longname": "src/server.js~app",
    "access": "public",
    "export": false,
    "importPath": "nowte-server",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 164,
    "kind": "variable",
    "name": "server",
    "memberof": "src/server.js",
    "static": true,
    "longname": "src/server.js~server",
    "access": "public",
    "export": false,
    "importPath": "nowte-server",
    "importStyle": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 165,
    "kind": "function",
    "name": "gracefulExit",
    "memberof": "src/server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server.js~gracefulExit",
    "access": "public",
    "export": false,
    "importPath": "nowte-server",
    "importStyle": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "kind": "index",
    "content": "",
    "longname": "/Users/alexander/Documents/astro-nowte/server/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"nowte-server\",\n  \"version\": \"0.0.1\",\n  \"description\": \"\",\n  \"main\": \"src/server.js\",\n  \"scripts\": {\n    \"test\": \"jest\",\n    \"start\": \"nodemon src/server.js\"\n  },\n  \"author\": \"progmem\",\n  \"license\": \"UNLICENSED\",\n  \"dependencies\": {\n    \"bcrypt\": \"^1.0.3\",\n    \"body-parser\": \"^1.18.2\",\n    \"cors\": \"^2.8.4\",\n    \"express\": \"^4.16.2\",\n    \"jsonwebtoken\": \"^8.1.0\",\n    \"mongoose\": \"^4.12.4\",\n    \"morgan\": \"^1.9.0\",\n    \"nodemailer\": \"^4.3.1\",\n    \"validator\": \"^9.0.0\"\n  },\n  \"devDependencies\": {\n    \"esdoc\": \"^1.0.4\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-external-nodejs-plugin\": \"^1.0.0\",\n    \"esdoc-node\": \"^1.0.2\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"jest\": \"^21.2.1\",\n    \"nodemon\": \"^1.12.1\"\n  }\n}\n",
    "longname": "/Users/alexander/Documents/astro-nowte/server/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]